
1) Если вам понадовится создать объект внутреннего класса где-либо еще, кроме как в не-
   статическом методе внешнего класса, нужно будет указать ти этого объекта следующим образом:
   ИмяВнешнегоКласса.ИмяВнутреннегоКласса, что и делается в примере Parcel2.java;


2) Объект внутреннего класса получает ссылку на внешний объект, который его создал,
   и поэтому может обращаться к членам внешнего объекта без дополнительных уточнений.
   Кроме того, для внутренних классов доступны все элементы внешнего класса.


3) Если вам потребуется получить ссылку на объект внешнего класса, укажите имя внешнего
   класса с точкой и this. Полученная ссылка автоматически относится к правильному типу,
   который известен и проверяется во время компиляции, не требуя лишних затрат ресурсов
   во время выполнения.


4) Чтобы создать объект внутреннего класса, обязательно должен существовать объект внешнего
   класса. Это объясняется тем, что объект внутреннего класса незаметно связывается с объектом
   внешнего класса, на базе которого он был создан. С другой стороны, при создании вложенного
   класса (статического внутриннего класса) ссылка на объект внешнего класса не нужна.


5) Пример в классе Parcel5.java демонстрирует создание всего класса в области действия метода
   (вместо области действия другого класса). Такая конструкция называется
   `локальным внутренним классом`.


6) Внутренний статический класс називают вложенным (nested). В Java они способны обращаться
   к закрытым членам внешнего класса.
   ~ Для того чтобы понять значение влючевого слова static в отношении внутренних классов, вы
   должны вспомнить, что объект обычного внутреннего класса скрыто хранит ссылку на объект создавшего
   его объемлюзего внешнего класса. Это условие не выполняется для внутренних классов, объявленных
   с ключевым словом static. Вложенный класс обладает следующими характеристиками
   а) Для создания его объекта не понадобится объект внешнего класса.
   б) Вы не можете обращаться к членам не-статического объекта внешнего класса из объекта вложенного класса



7) Обычно в интерфейс нельзя помещать код, но вложенный класс может быть частью интерфейса.
   Любой класс, помещенный в интерфейс, автомтически объявляется как открытый (public) и
   статический (static). Так как класс объявляется как static, он не нарушает правил обращения
   с интерфейсом - этот вложенный класс всего лишь размещается в пространстве имен интерфейса.


8)


9)