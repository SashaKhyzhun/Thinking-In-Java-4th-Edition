Перегрузкой называется изменение смысла оператора при его использовании с конкретным классов.
            (Перегрузка операторов в Java ограничивается операторами + и += для класса String;
            Java не позволяет программисту перегружать другие операторы).

Если при создании метода toString() выполняются простые операции, в которых компилятор может
            разобратся самостоятельно, обычно можно доверить построение результата компилятору.
            Но если в вычислениях задействован цикл, лучше явно использовать StringBuilder в
            toString().


Форматные спецификаторы.
 * Для Управления интервалами и выравниванием вставляемых данных потребуются более
 * сложные форматные спецификаторы.  Общий синтаксис выглядит так:
 *
 * %[аргумент_индекс$][флаги][ширина][.точность]преобразование
 *
 * Спецификатор "ширина" управляет минимальным размером поля.
 * Поле "точность "задает максимально значение (имеет разный смысл для разних типов).
 *                        для объектов String - задает max количество выводимых символов
 *                        для вещественных чисел задает количество выводимых знаков (def: 6)


+------------------------------------------------------------------------------+
| Символы преобразования                                                       |
+------------------------------------------------------------------------------+
|       d       |   Целое число (десятичное)                                   |
|       c       |   Символ Юникода                                             |
|       b       |   Логическое значение                                        |
|       s       |   Строка                                                     |
|       f       |   Вещественное число (в десятичной зиписи)                   |
|       e       |   Вещественное число (в экспонециальной зиписи)              |
|       x       |   Целое число (шестнадцатеричное)                            |
|       h       |   Хеш-код (в шестнадцатеричной записи)                       |
|       %       |   Литерал "%"                                                |
+---------------+--------------------------------------------------------------+

+------------------------------------------------------------------------------+
| Логические Операторы                                                         |
+------------------------------------------------------------------------------+
|       XY      |   Х, за которым следует Y                                    |
+------------------------------------------------------------------------------+
|      X|Y      |   Х или Y                                                    |
+------------------------------------------------------------------------------+
|      (X)      |   Сохраняющая группировка. Позднее в выражении к i-й         |
|               |   соохраненной группе можно обратиться при помощи записи \i  |
+------------------------------------------------------------------------------+


Квантификатор описывает режим "поглащения" входного текста шаблоном:
Регулярные выражения предоставляют инструменты позволяющие указать сколько раз
может повторятся один или несколько символов. С некоторыми мы уже встречались:

+     - Одно или более
*     - Ноль или более
?     - Ноль или одно
{n}   - Ровно n раз
{m,n} - От m до n включительно
{m,}  - Не менее m
{,n}  - Не более n

Максимальные квантификаторы используются по умолчанию. В максимальном ре-жиме для
выражения подбирается максимально возможное количество возможных совпадений. Одна
из типичных ошибок = полагать, что шаблон совпадет только с первой возможной группой
символов, тогда как в действительности механизм регулярных выражений продолжает
двигаться вперед, пока не подберет возможное совпадение максимальной длины.

Минимальный квантификатор (задается вопросительным знаком) старается ограничиться
минимальным количеством символов, необходимых для соответствия шаблону

Захватывающие квантификаторы поддерживаются только в Java. Они сложнее других
квантификаторов, поэтому, скорее всего, на первых порах вы не будете их использовать.
При применении регулярного выражения к строке генерируются множественные состояния
для возврата в случае неудачи при поиске. Захваты-вающие квантификаторы не поддерживают
эти промежуточные состояния, что предотвращает возврат и может способствовать
повышению эффективности.



Теперь мы можем полностью понять регулярное выражение с самого первого
примера: "^[a-z0-9_-]{3,15}$" .

Разберем её по кусочкам:
^ - начало строки
[a-z0-9_-] - символ который может быть маленькой латинской буквой или цифрой или
             символом подчеркивания.
{3,15} - предыдущий объект(смотри выше) может повторяться от 3х до 15 раз.


Вот примеры основных метасимволов:
  ^     -  (крышка, цирркумфлекс) начало проверяемой строки
  $     -  (доллар) конец проверяемой строки
  .     -  (точка) представляет собой сокращенную форму записи для символьного класса,
           совпадающего с любым символом
  |     -  означает «или». Подвыражения, объединенные этим способом, называются
           альтернативами (alternatives)
  ?     -  (знак вопроса) означает, что предшествующий ему символ является необязательным
  +     -  обозначает «один или несколько экземпляров непосредственно предшествующего элемента
  *     –  любое количество экземпляров элемента (в том числе и нулевое)
  \\d   –  цифровой символ
  \\D   –  не цифровой символ
  \\s   –  пробельный символ
  \\S   –  не пробельный символ
  \\w   –  буквенный или цифровой символ или знак подчёркивания
  \\W   –  любой символ, кроме буквенного или цифрового символа или знака подчёркивания


Группы представляют собой части регулярного выражения, заключенные в круглые скобки,
к которым позднее можно обращаться по номеру группы. Группа 0 соответствует совпадению
всего выражения, группа 1 - совпадению первого подвыражения в круглых скобках и т. д.
Таким образом, в выражении A(B(C))D задействованы три группы:
              группа 0 - АBCD, группа 1 -- BС, группа 2 -- C.



































