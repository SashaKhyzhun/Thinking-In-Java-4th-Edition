
1) Все методы в интерфейсе по умолчанию public, если их сделать private, то они будут
   доступны только на уровне пакета. это может привести к проблемам наследования.


2) Все переменные в интерфейсах по умолчанию static и final;


3) Решение, при котором поведение метода изменяется в зависимости от переданного
   объекта-аргумента, называется паттерном "Стратегия". (а_../ClassProcessor.class)


4) Паттерн "Адаптер" - вы пишите код, который получает имеющийся
   интерфейс, и создаете тот интерфейс, который вам нужен.


5) Главная причина введения в язын интерфейсов представлена в примере Adventure.class:
   а) Это возможность выполнять восходящее преобразование к нескольким базовым типам
   б) Вторая причина для использования интерфейсов совпадает с предназначением абстрактных
      классов: запретить программисту-клиенту создание объектов этого класса.


6) Возникает естественный вопрос: что лучше - интерфейс или абстрактный класс?
   Если возможно создать базовый класс без определений методов и переменных-членов,
   выбирайте именно интерфейс, а не абстрактрый класс.
   Вообще говоря, если известно, что нечно будет использоваться, как базовый класс,
   первым делом постарайтесь сделать это "нечто" интерфейсом.