В Java предусмотрены следующие способы хранения объектов.

1. Массив ассоциирует с объектом числовой индекс. Он содержит объекты известного типа,
   так что при поиске объекта нет необходимости проводить преобразование. Он может иметь
   несколько измерений и способен хранить примитивы, но после создания его размер изменить
   невозможно.

2. Коллекция (Collection) заполняется одиночными элементами, в то время как карта (мар)
   хранит ассоциированные пары ключ-значение». При использовании обобщенных типов Java
   разработчик указывает тип объекта, хранимого в контейнере, так что поместить объект
   неправильного типа ему не удастся, а с извлекаемыми объектами не нужно выполнять
   преобразование типа. И Collection, и Мар автомати-чески изменяют свои размеры с
   добавлением новых элементов. Контейнер не может хранить примитивы, но механизм
   автоматической упаковки обеспечит необходимые преобразования к типам-«оберткам,
   хранимым в контейнере.

З. Подобно массиву, список (list) также ассоциирует с объектами числовые индексы — массивы
   и списки можно представить себе как упорядоченные контейнеры.

4. Используйте список ArrayList, если имеется необходимость частого получения произвольных
   элементов, или LinkedList, если будет производиться множество вставок и удалении элементов
   в середине списка.

5. Возможности очередей и стеков предоставляет класс LinkedList.

6. Карта (мар) позволяет ассоциировать с объектами не числа, но объекты с другими объектами.
   Класс HashMap был специально разработан для быстрого доступа к элементам, в то время как
   TreeMap хранит набор ключей в отсортированном виде и по-этому уступает по скорости HashMap.
   LinkedHashMap упорядочивает свои элементы в порядке добавления, но обеспечивает быстрый
   доступ к элементам благодаря хешированию.

7. Множество (Set) позволяет хранить не более одного экземпляра определенного объекта.
   Множество HashSet предназначено для максимально ускоренного поиска, в то время как
   множество TreeSet хранит элементы отсортированными
   Элементы множества LinkedHashSet хранятся в порядке добавления.

8. При написании новых программ нет никакой необходимости использовать устаревшие классы
   Vector, HashTable и Stack.

   Полезно взглянуть на упрощенную диаграмму контейнеров Java (без абстрактных классов
   или унаследованных компонентов). На диаграмме представлены только те интерфейсы и классы,
   которые часто используются в повседневной работе:

   ![alt tag](http://github.thinkingbar.com/image/vessel.jpg)

   Из диаграммы видно, что на самом деле существуют только четыре контейнерных компонента:
   карта (Map),
   список (List),
   множество (Set)
   и очередь (Queue)

   - и две или три реализации для каждого из них.

   Контейнеры, используемые чаще всего, выделены жирными линиями рамки.
   Пунктирные прямоугольники представляют интерфейсы,
   Прямоугольники со сплошным контуром - обычные (конкретные) классы.

   Пунктирные линии с пустыми стрелками обозначают, что определенный класс реализует интерфейс.
   Пунктирные линии с сплошные стрелки показывают, что класс может производить объекты того
   класса, на который нацелена стрелка. Например, любая коллекция (Collection) в состоянии
   произвести итератор (Iterator), в то время как список (List) может породить итератор
   ListIterator (вместе с обычным итератором Iterator, так как список (List) унаследован от
   Collection).



