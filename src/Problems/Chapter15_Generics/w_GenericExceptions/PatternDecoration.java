package Problems.Chapter15_Generics.w_GenericExceptions;

/**
 * @author SashaKhyzhun on 3/16/17. Page 579.
 * Использование паттерна "Декоратор".
 *
 * Если посмотреть на способ использования, концепция примеси кажется тесно связанной с паттерном
 * проектирования "Декоратор". Декораторы часто используются в ситуациях, когда для обеспечения всех
 * возможных комбинаций простое субклассирование порождает столько классов, что становится непрактичным.
 *
 * Паттерн <Декоратор> использует иерархию объектов для динамического и прозрачного добавления обязанностей
 * в отдельные объекты. Он определяет, что все объекты, являющиеся <обертками> для вашего исходного объекта,
 * обладают единым базовым интерфейсом.
 *
 * Имеется декорируемый объект, а вы наращиваете его функциональность посредством добавления «оберток».
 * Это делает использование декораторов прозрачным - имеется общий набор сообщений, которые могут отправляться
 * объекту независимо от того, был он декорирован или нет. Декорирующий класс может добавлять методы, но,
 * как вы вскоре увидите, в этом его возможности ограниченны.
 *
 * Декораторы реализуются с использованием композиции и формальных структур (иерархия
 * декорируемый объект/декоратор), тогда как примеси основываются на наследовании.
 *
 * Таким образом, примеси, основанные на параметризованном типе, можно рассматривать как
 * обобщенный механизм декораторов, не требующий структуры наследования паттерна «Декоратор.
 */
public class PatternDecoration {
}
