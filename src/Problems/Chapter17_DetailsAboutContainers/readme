 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Название класса / интерф. *                          Описание                                   *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Set (интерфейст           * Каждый элемент, добавляемый в множесто Set, должен быть уникальным; *
 *                           * в противном случае дубликат не добавляется. Все объекты помещаемые  *
 *                           * в Set, должны определять метод equals() для выполнения сравнения.   *
 *                           * Интерфейс Set полностью идентичен интерфейсу Collection. Множество  *
 *                           * Set не гарантирует того, что хранимые в нем элементы будут          *
 *                           * располагатся в определенном порядке.                                *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * HashSet"                  * Для реализаций Set, у который первостепенное значение имеет быстрый *
 *                           * поиск. Хранимые объекты должны определять метод hashCode()          *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * TreeSet                   * Упорядоченное множество, реализованное на основе дерева. Из него    *
 *                           * можно извлекать упорядоченную последовательность элементов.         *
 *                           * Элементы также должны реализовать интерфейс Comparable              *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * LinkedHashSet             * Обладает аналогичной HashSet скоростью поиска, а также своими       *
 *                           * силами (используя связанный поиск) запоминает порядок добавления    *
 *                           * элементов (порядок вставки). Таким образом, при переборе элементов  *
 *                           * этого множества они следуют в порядке вставки. Элементы такоже      *
 *                           * должны определять hashCode()                                        *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Звездочка рядом с HashSet указывает, что при отсутствии других ограничений
 * следует выбирать именно этот вариант, потому что он оптимизирован по скорости.




 * Элементы отсортированного множества SortedSet гарантированно хранятся в порядке сортировки,
 * что позволяет задействовать дополнительную функциональность, обеспечиваемую интерфейсом SortedSet.
 *
 * +----------------------------------------------------------------------------------+
 * |# Coparator comparator(): | return объект Comparator, использующийся для данного  |
 * |                          | множества, или null для естественного упорядочиваня.  |
 * +----------------------------------------------------------------------------------+
 * |# Object first():         | Просизводит наименьший элемент множества.             |
 * +----------------------------------------------------------------------------------+
 * |# Object last();          | Просизводит наибольний элемент множества.             |
 * +----------------------------------------------------------------------------------+
 * |# SortedSet subSet        | производит надмножество данного множества, в которое  |
 * | (fromElement, toElement) | включены элементы от fromElement (включительно)       |
 * |                          | до toElelemt (не включительно)                        |
 * +----------------------------------------------------------------------------------+
 * |# SortedSet headSet       | производит надмножество, содержащее все элементы,     |
 * | (toElement)              | меньше toElement                                      |
 * +----------------------------------------------------------------------------------+
 * |# SortedSet tailSet       | производит нажмножество, содержащее все элементы,     |
 * | (toElement)              | большие либо равные fromElement                       |
 * +----------------------------------------------------------------------------------+